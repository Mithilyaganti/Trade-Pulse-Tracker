services:
  # Zookeeper - Required for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - trade-pulse-network
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka - Message queuing system for decoupled communication
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - trade-pulse-network
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "kafka-broker-api-versions --bootstrap-server localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 3

  # PostgreSQL - Stores current price snapshots with low-latency access
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: tradepulse
      POSTGRES_USER: tradepulse
      POSTGRES_PASSWORD: tradepulse123
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-scripts:/docker-entrypoint-initdb.d
    networks:
      - trade-pulse-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tradepulse -d tradepulse"]
      interval: 30s
      timeout: 10s
      retries: 3

  # InfluxDB - Time-series database optimized for latency metrics
  influxdb:
    image: influxdb:2.7-alpine
    hostname: influxdb
    container_name: influxdb
    ports:
      - "8086:8086"
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: admin
      DOCKER_INFLUXDB_INIT_PASSWORD: adminpassword
      DOCKER_INFLUXDB_INIT_ORG: tradepulse
      DOCKER_INFLUXDB_INIT_BUCKET: metrics
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: tradepulse-super-secret-auth-token
    volumes:
      - influxdb_data:/var/lib/influxdb2
      - influxdb_config:/etc/influxdb2
    networks:
      - trade-pulse-network
    healthcheck:
      test: ["CMD", "influx", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Grafana - Visualizes latency metrics with customizable dashboards
  grafana:
    image: grafana/grafana:10.0.0
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - trade-pulse-network
    depends_on:
      influxdb:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Monitoring Service - Phase 2: Standalone HTTP endpoint monitor
  monitoring-service:
    build:
      context: ./packages/monitoring-service
      dockerfile: Dockerfile
      network: host
    hostname: monitoring-service
    container_name: monitoring-service
    environment:
      # InfluxDB Configuration
      INFLUX_URL: http://influxdb:8086
      INFLUX_TOKEN: tradepulse-super-secret-auth-token
      INFLUX_ORG: tradepulse
      INFLUX_BUCKET: metrics

      # Monitoring Configuration
      PROBE_INTERVAL: "*/30 * * * * *" # Every 30 seconds

      # Configure targets to monitor (will be updated as services are added)
      # For now, monitor external services for demonstration
      TARGETS: "http://httpbin.org/delay/1,http://httpbin.org/status/200,https://api.github.com/zen"
    networks:
      - trade-pulse-network
    depends_on:
      influxdb:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "node", "-e", "console.log('Monitoring service health check')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Tick Generator - Phase 3: Financial price tick generator
  tick-generator:
    build:
      context: ./packages/tick-generator
      dockerfile: Dockerfile
      network: host
    hostname: tick-generator
    container_name: tick-generator
    networks:
      - trade-pulse-network
    volumes:
      # Mount additional CSV data files if needed
      - ./packages/tick-generator/data:/app/data
    restart: "no" # Don't auto-restart, let it complete its task
    profiles:
      - tick-generator # Optional profile to start only when needed
    # Default configuration - can be overridden via docker-compose override
    command: >
      sh -c "echo 'Tick Generator is ready. Use docker-compose run commands to start specific data sources:' &&
             echo '  CSV Replay: docker-compose run --rm tick-generator node dist/index.js --source=csv --file=/app/data/AAPL.csv' &&
             echo '  Binance Relay: docker-compose run --rm tick-generator node dist/index.js --source=binance --symbols=BTCUSDT,ETHUSDT' &&
             echo 'Sleeping for manual activation...' &&
             sleep infinity"

networks:
  trade-pulse-network:
    driver: bridge
    name: trade-pulse-network

volumes:
  postgres_data:
    name: trade-pulse-postgres-data
  influxdb_data:
    name: trade-pulse-influxdb-data
  influxdb_config:
    name: trade-pulse-influxdb-config
  grafana_data:
    name: trade-pulse-grafana-data
